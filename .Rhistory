plot(x, resid(model), xlab="Sales", ylab="Residuals")
boxplot(resid(model), xlab="Model Residuals"))
plot(x, resid(model), xlab="Sales", ylab="Residuals")
boxplot(resid(model), xlab="Model Residuals")
plot(x, resid(model), xlab="Sales", ylab="Residuals")
boxplot(resid(model), xlab="Model Residuals")
hist(resid(model))
par(mfrow=c(1,3))
plot(x, resid(model), xlab="Sales", ylab="Residuals")
boxplot(resid(model), xlab="Model Residuals")
hist(resid(model))
plot(lm(y~x))
plot(lm(y~x))[3]
names(plot(lm(y~x)))
plot(lm(y~x),which=5)
plot(lm(y~x),which=5)
plot(model,which=5)
knitr::opts_chunk$set(echo = TRUE)
model <- lm(medv ~ age, data=train)
---
title: "TD3"
author: "Clément Cornet"
date: "30/09/2022"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
<p> Imports </p>
```{r}
library(MASS)
library(caTools)
```
<p> Split between train and test datasets </p>
```{r}
sample = sample.split(Boston, SplitRatio = 0.7)
train = subset(Boston, sample == TRUE)
train = subset(Boston, sample == FALSE)
```
<p> Check if there is a linear relationship between the variables medv and age. (use cor() function). </p>
```{r}
cor(Boston$medv, Boston$age)
```
<p> Fit a model of housing prices in function of age and plot the observations and the regression line. </p>
```{r}
model <- lm(medv ~ age, data=train)
summary(model)
```
```{r}
plot(train$age, train$medv)
abline(model)
```
---
title: "TD3"
author: "Clément Cornet"
date: "30/09/2022"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
<p> Imports </p>
```{r}
library(MASS)
library(caTools)
```
<p> Split between train and test datasets </p>
```{r}
sample = sample.split(Boston, SplitRatio = 0.7)
train = subset(Boston, sample == TRUE)
train = subset(Boston, sample == FALSE)
```
<p> Check if there is a linear relationship between the variables medv and age. (use cor() function). </p>
```{r}
cor(Boston$medv, Boston$age)
```
<p> Fit a model of housing prices in function of age and plot the observations and the regression line. </p>
```{r}
model <- lm(medv ~ age, data=train)
summary(model)
```
```{r}
plot(train$age, train$medv)
abline(model)
```
<p> Train a regression model using both lstat and age as predictors of median house value. (Remember that we transformed lstat, use the same transformation here). What is the obtained model? </p>
```{r}
---
title: "TD3"
author: "Clément Cornet"
date: "30/09/2022"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
<p> Imports </p>
```{r}
library(MASS)
library(caTools)
```
<p> Split between train and test datasets </p>
```{r}
sample = sample.split(Boston, SplitRatio = 0.7)
train = subset(Boston, sample == TRUE)
train = subset(Boston, sample == FALSE)
```
<p> Check if there is a linear relationship between the variables medv and age. (use cor() function). </p>
```{r}
cor(Boston$medv, Boston$age)
```
<p> Fit a model of housing prices in function of age and plot the observations and the regression line. </p>
```{r}
model <- lm(medv ~ age, data=train)
summary(model)
```
```{r}
plot(train$age, train$medv)
abline(model)
```
<p> Train a regression model using both lstat and age as predictors of median house value. (Remember that we transformed lstat, use the same transformation here). What is the obtained model? </p>
```{r}
multiple_lr <- lm(medv ~ lstat + age, data=train)
summary(multiple_lr)
```
multiple_lr <- lm(medv ~ log(lstat) + age, data=train)
summary(multiple_lr)
install.packages("corrplot")
anova(model)['Residuals', 'Mean Sq']
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
mean(summary(model)$residuals^2)
help(str)
boxplot(Boston$medv, Boston$chas)
boxplot(Boston$medv ~ Boston$chas)
aggregate(Boston$chas, FUN=mean )
aggregate(Boston$chas ~ Boston$medv, FUN=mean )
aggregate(Boston$medv ~ Boston$chas, FUN=mean )
aov(medv ~ chas, data=Boston)
anova <- aov(medv ~ chas, data=Boston)
summary(anova)
result(anova)
anova <- aov(medv ~ chas, data=Boston)
summary(anova)
predict(model,test)
sample = sample.split(Boston, SplitRatio = 0.7)
train = subset(Boston, sample == TRUE)
test = subset(Boston, sample == FALSE)
predict(model,test)
setwd("C:/Users/cleme/OneDrive/Documents/Moui/ESILV A4/PR/MixedClusteringST")
library(RMixtComp)
data <- read.csv('heart_failure_long.csv')
data <- data[1:2]
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age"="Gaussian","anaemia"="Gaussian")
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 1:2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
clusters
### setwd("C:/Users/cleme/OneDrive/Documents/Moui/ESILV A4/PR/MixedClusteringST")
availableModels()
data[1]
data[2]
data[2] +1
data[2] <- data[2] +1
availableModels()
library(RMixtComp)
data <- read.csv('heart_failure_long.csv')
data <- data[1:2]
data[2] <- data[2] +1
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age"="Gaussian","anaemia"="Multinomial")
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 1:2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
clusters
### setwd("C:/Users/cleme/OneDrive/Documents/Moui/ESILV A4/PR/MixedClusteringST")
data <- read.csv('heart_failure_long.csv')
data(c(1,2,3))
data[c(1,2,3)]
availableModels()
data <- read.csv("mixtcomp_temp.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Gaussian",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
data
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Gaussian",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
data <- read.csv("mixtcomp_temp.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Weibull",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Weibull",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
data$platelets[c(29,127)]
data$platelets
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
data <- read.csv("mixtcomp_temp.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
availableModels()
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[4] <- 0
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[4] <- 0
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
cls
View(data)
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[4] <- 0
data[5] <- data[5] + 1
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
data
model
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
availableModels()
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data[4] <- 0
data[5] <- data[5] + 1
data$platelets
data$platelets<- 0
data$platelets
data[5] <- data[5] + 1
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
clusters
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
#data$platelets<- 0
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data$platelets<- 0
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = 2, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = 2, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
clusters
library(RMixtComp)
library("rjson")
k <- fromJSON(file = "k.json")$n_clusters
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
#data$platelets <- 0
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Poisson",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = k, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = k, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
write.csv(clusters, "mixtcomp_temp.csv", row.names = FALSE)
str(data$platelets)
str(data$age)
library(RMixtComp)
library("rjson")
k <- fromJSON(file = "k.json")$n_clusters
data <- read.csv("heart_failure_long.csv")
data <- data[c(1, 10, 7, 9, 11)]
data[2] <- data[2] + 1
data$platelets <- data$platelets / 10
data[5] <- data[5] + 1
# "Gaussian" for numeric variable, "Multinomial" for character or factor variable and "Poisson" for integer variable # nolint
algo <- list(nbBurnInIter = 50,
nbIter = 50,
nbGibbsBurnInIter = 50,
nbGibbsIter = 50,
nInitPerClass = 20,
nSemTry = 20,
confidenceLevel = 0.95)
model <- list("age" = "Poisson",
"sex" = "Multinomial",
"serum_sodium" = "Poisson",
"platelets" = "Gaussian",
"smoking" = "Multinomial") # nolint
resLearn1 <- mixtCompLearn(data, model, algo,
nClass = k, nRun = 2, nCore = 1)
resPredict <- mixtCompPredict(data, model, algo,
resLearn1, nClass = k, nCore = 1)
clusters <- resPredict$variable$data$z_class$completed
write.csv(clusters, "mixtcomp_temp.csv", row.names = FALSE)
